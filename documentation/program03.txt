CS325 - Computer Graphics
Skidmore College
Spring 2016
Instructor: Michael Eckmann

Program 3 - Ray Tracer

Due at 11:59 pm. May 4, 2016 via email to meckmann@skidmore.edu (send any 
source code files and any other files necessary to compile and exectute 
your program as well as the generated images (.jpgs or .ppms).

=========================================================================

For your final programming assignment you are to implement a ray tracer.  Your ray tracer must be able to handle spheres, polygons and point light sources.  Your ray tracer should be modelled after the recursive ray tracing algorithm discussed in class (and given to you in a handout.)  The depth of your ray-tracing tree should be at least 5 (e.g. 4 levels would be primary ray leads to a reflection ray and that one leads to another reflection ray, and that one leads to another reflection ray.)

Your ray tracer program will read in an environment file.  The environment file's format is up to you.  The environment file will contain information (position/size, material surface properties, etc.) about the objects (spheres or polygons) and lights (point light sources) in the environment for which you wish to generate an image.  The environment filename must be passed in as a command line parameter.

Your ray tracer must generate an image of at least 1024x768 pixels from an environment containing at least 3 spheres, 2 polygons and 2 point light sources.  All the objects must be at least partially visible in the generated image and both lights must illuminate the objects that will be in the image.

The ray tracer must implement ambient illumination, diffuse illumination, specular reflection and shadows.  The illumination equations that we discussed to take into account ambient, diffuse and specular reflections for multiple light sources (with each light and object having separate R G and B values) are what you must follow for this program.

Your objects must be described with positional and size information as well as a color, ambient-reflection coefficient, diffuse-reflection coefficient, specular-reflection coefficient and specular-reflection exponent.  Your lights must be defined to have a position and R,G and B components of its color.

You will need a center of projection and a window on a view plane representing the 2d image.
You can feel free to choose different values, but suggested values are

CoP = (0,0,0)
Window is on plane z=-1 and lower left corner is (xmin, ymin) = (-1,-1) and upper right corner is (xmax, ymax) = (1,1).

This is a 2x2 area, therefore the image you would make from this must be a square (same number
of pixels across as down).  If you prefer a different x-y ratio, feel free to not make a square.

NOTE: your image must be bigger than this example, but I worked up an example of 200x200 below.

Example for a 200x200 pixel image.  If you think of this 200x200 area of pixels
as being numbered with 0,0 at the bottom-left and 199,199 at the top-right then the center of
pixel (i,j) in world coordinates (on the z=-1 plane) will have an x value of (2/h)*(i+0.5)-1 and a y value of (2/w)*(j+0.5)-1, where h is the height in pixels and w is the width in pixels, which in this example are both 200.


Extra Credit:
Implement any of the following enhancements

A. 2d Texture mapping for spheres - a texture should be stored in a ppm or jpg file.

B. 2d Texture mapping for polygons - a texture should be stored in a ppm or jpg file.

C. Animation - generate a set of at least 100 images of your environment.  In between each image that you generate your scene should change in some way.  I suggest naming your files with some scheme that contains a two digit number corresponding to where in the sequence it was generated, eg. rtimage001.jpg, rtimage002.jpg ... rtimage100.jpg
Do not use spaces in file names.

D. Antialiased Ray tracing using the adaptive sampling antialiasing method discussed in class.  If you choose this to implement, then this does not supercede regular ray tracing, your program must be able to do both regular and antialiased ray tracing.  The choice of which to do can be handled by a value passed as a command line parameter.

E. Have your program handle transparent/translucent objects and show them off in some environment.

F. GL program to display the image as it is being created pixel by pixel.

G. An enhancement other than above of your choosing.

State any information I need to know to be able to compile and execute your program in comments at the top of the file containing main.

Have fun!!!
